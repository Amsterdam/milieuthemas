from typing import List, Dict

from django.contrib.contenttypes import models
from django.core.management import BaseCommand
from django.db import connection

from datapunt_generic.generic.mixins import ModelViewFieldsMixin

GEO_VIEW_PREFIX = 'geo_'


class Command(BaseCommand):
    views = []

    def handle(self, *args, **options):
        self.views = []

        self.generate_views()
        self.sync_views()

    def sync_views(self):
        """
        Using the list of views generated by generate_views
        Each view is first dropped (if exists) and then created
        """
        cursor = connection.cursor()

        for view in self.views:
            cursor.execute(
                "DROP VIEW IF EXISTS {}".format(view['view_name'])
            )
            cursor.execute(
                "CREATE VIEW {} AS {}".format(view['view_name'], view['sql'])
            )

        self.stdout.write('synced {} views'.format(len(self.views)))

    def generate_views(self) -> List[Dict[str, str]]:
        """
        Creating geoviews based on the models.
        The geoviews are created for models that are subclass of
        the ModelViewFieldsMixin. Look in that mixin to understand
        how the geoview columns are composed.

        Returns a list of dicts containg the view name and the sql
        query to create the view
        """
        app_models = models.ContentType.objects.all()

        for app_model in app_models:
            model_class = app_model.model_class()

            if model_class is None or not issubclass(model_class,
                                                     ModelViewFieldsMixin):
                continue

            model = model_class()

            view_fields = ', '.join(model.get_view_fields())
            model_table = '{}_{}'.format(app_model.app_label, app_model.model)

            for geo_field in model.model_geo_fields:
                view_name = '{}{}_{}'.format(GEO_VIEW_PREFIX,
                                             app_model.app_label,
                                             app_model.model)

                if 'line' in geo_field:
                    view_name += '_line'
                elif 'polygon' in geo_field:
                    view_name += '_polygon'
                elif 'point' in geo_field:
                    view_name += '_point'
                elif 'raster' in geo_field:
                    view_name += '_raster'

                self.views.append({
                    'view_name': view_name,
                    'sql': f'SELECT {view_fields}, {geo_field} as geometrie {model.model_display_field} FROM {model_table} WHERE {geo_field} IS NOT NULL'
                })
